{"version":3,"sources":["webpack:///../OTKit/otkit-colors/token.common.js","webpack:///./src/pages/otkit-colors.js","webpack:///./node_modules/chroma-js/chroma.js"],"names":["module","exports","colorPrimary","colorPrimaryActive","colorGrayPrimary","colorGraySecondary","colorGrayUtility","colorGrayActive","colorWhite","__webpack_require__","tokens","_lodash2","default","toPairsIn","_token2","map","token","index","hex","rgb","colorBlock","_chromaJs2","contrast","_react2","createElement","className","_otkitColorsModule2","key","style","backgroundColor","color","darken","kebabCase","_sectionHeader2","text","Color","DEG2RAD","LAB_CONSTANTS","PI","PITHIRD","RAD2DEG","TWOPI","_average_lrgb","_guess_formats","_guess_formats_sorted","_input","_interpolators","abs","atan2","bezier","blend","blend_f","brewer","burn","chroma","clip_rgb","cmyk2rgb","cos","css2rgb","dodge","each","floor","hcg2rgb","hex2rgb","hsi2rgb","hsl2css","hsl2rgb","hsv2rgb","interpolate","interpolate_hsx","interpolate_lab","interpolate_lrgb","interpolate_num","interpolate_rgb","lab2lch","lab2rgb","lab_xyz","lch2lab","lch2rgb","lighten","limit","log","luminance_x","m","max","multiply","num2rgb","overlay","pow","rgb2cmyk","rgb2css","rgb2hcg","rgb2hex","rgb2hsi","rgb2hsl","rgb2hsv","rgb2lab","rgb2lch","rgb2luminance","rgb2num","rgb2temperature","rgb2xyz","rgb_xyz","rnd","round","screen","sin","sqrt","temperature2rgb","type","unpack","w3cx11","xyz_lab","xyz_rgb","slice","classToType","len","name","o","ref","split","length","toLowerCase","obj","strType","Object","prototype","toString","call","x","min","args","i","_clipped","_unclipped","Math","arguments","func","ctor","child","result","apply","undefined","__WEBPACK_AMD_DEFINE_RESULT__","version","arg","chk","len1","me","mode","w","this","push","_rgb","sort","a","b","p","test","console","warn","clone","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","results","colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","l","y","z","isNaN","Yn","Xn","Zn","r","t","t1","t2","t0","Kn","t3","g","ref1","lab","concat","I","I0","I1","c","lab0","lab1","lab2","lab3","ref2","f","scale","cubehelix","start","rotations","hue","gamma","lightness","dh","dl","fract","amp","cos_a","sin_a","s","h","random","code","charAt","col1","col2","interpol","res","alpha","mix","k","v","rgba","n","lrgb","xyz0","xyz1","xyz","average","A","cnt","dx","dy","first","xyz2","splice","get","u","match","substr","parseInt","css","channels","hxa","str","Number","NaN","hsl","q","ref3","ref4","ref5","delta","hsv","num","_c","_g","hcg","aa","ab","join","named","L","lch","hcl","reverse","cmyk","gl","luminance","lum","cur_lum","eps","max_iter","lm","kelvin","temp","maxTemp","minTemp","temperature","K","l1","l2","distance","d","sum_sq","deltaE","C","L1","L2","a1","a2","b1","b2","c1","c2","c4","delA","delB","delC","h1","sc","sl","v1","v2","v3","modechan","channel","src","indexOf","set","value","clipped","amount","brighten","darker","brighter","saturate","desaturate","premultiply","bottom","top","normal","c0","out","analyze","data","val","MAX_VALUE","sum","values","count","domain","limits","positions","_classes","_colorCache","_colors","_correctLightness","_domain","_gamma","_max","_min","_mode","_nacol","_out","_padding","_pos","_spread","_useCache","getClass","getColor","resetCache","setColors","tmap","col","maxc","minc","bypassMap","classes","_m","range","_o","spread","correctLightness","L0","L_actual","L_diff","L_ideal","pol","padding","numColors","dd","dm","samples","cache","scales","cool","hot","filter","add","visit","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","assignments","best","centroids","cluster","clusterSizes","dist","j","kClusters","max_log","min_log","mindist","nb_iters","newCentroids","pb","pr","ref10","ref11","ref12","ref13","ref14","ref6","ref7","ref8","ref9","repeat","tmpKMeansBreaks","LOG10E","Array","acos","hsi","hue0","hue1","lbv0","lbv1","sat","sat0","sat1","n1","n2"],"mappings":"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","file":"component---src-pages-otkit-colors-js-adad24565ef1ddf68edd.js","sourcesContent":["module.exports = {\n  colorPrimary: \"rgb(218, 55, 67)\",\n  colorPrimaryActive: \"rgb(184, 34, 45)\",\n  colorGrayPrimary: \"rgb(51, 51, 51)\",\n  colorGraySecondary: \"rgb(113, 113, 113)\",\n  colorGrayUtility: \"rgb(225, 225, 225)\",\n  colorGrayActive: \"rgb(247, 247, 247)\",\n  colorWhite: \"rgb(255, 255, 255)\",\n};\n\n\n// WEBPACK FOOTER //\n// ../OTKit/otkit-colors/token.common.js","import React from 'react';\nimport _ from 'lodash';\nimport chroma from 'chroma-js';\n\nimport SectionHeader from '../components/section-header';\nimport token from 'otkit-colors/token.common';\nimport styles from '../styles/otkit-colors.module.css';\n\n// take a hex and give us a nice text color to put over it\nconst textColor = hex => {\n  const vsWhite = chroma.contrast(hex, 'white');\n  if (vsWhite > 4) {\n    return '#FFF';\n  }\n  return chroma(hex)\n    .darken(3)\n    .hex();\n};\n\nconst Colors = () => {\n  var tokens = _.toPairsIn(token);\n\n  tokens = tokens.map((token, index) => {\n    const rgb = token[1];\n    const colorBlock =\n      chroma.contrast(rgb, 'white') > 4 ? 'color-block' : 'color-block-border';\n    return (\n      <div className={styles['card']} key={index}>\n        <div\n          className={styles[colorBlock]}\n          style={{ backgroundColor: rgb, color: textColor(rgb) }}\n        >\n          <div className={styles['color-hex']}>{chroma(rgb).hex()}</div>\n          <div className={styles['color-rgb']}>{rgb}</div>\n        </div>\n        <div className={styles['color-name']}>{_.kebabCase(token[0])}</div>\n      </div>\n    );\n  });\n  return (\n    <section>\n      <SectionHeader text=\"Colors\" />\n      <div className={styles['section-color']}>{tokens}</div>\n    </section>\n  );\n};\n\nexport default Colors;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/otkit-colors.js","\n/**\n * @license\n *\n * chroma.js - JavaScript library for color conversions\n * \n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * \n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\n(function() {\n  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,\n    slice = [].slice;\n\n  type = (function() {\n\n    /*\n    for browser-safe type checking+\n    ported from jQuery's $.type\n     */\n    var classToType, len, name, o, ref;\n    classToType = {};\n    ref = \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \");\n    for (o = 0, len = ref.length; o < len; o++) {\n      name = ref[o];\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\n    }\n    return function(obj) {\n      var strType;\n      strType = Object.prototype.toString.call(obj);\n      return classToType[strType] || \"object\";\n    };\n  })();\n\n  limit = function(x, min, max) {\n    if (min == null) {\n      min = 0;\n    }\n    if (max == null) {\n      max = 1;\n    }\n    if (x < min) {\n      x = min;\n    }\n    if (x > max) {\n      x = max;\n    }\n    return x;\n  };\n\n  unpack = function(args) {\n    if (args.length >= 3) {\n      return [].slice.call(args);\n    } else {\n      return args[0];\n    }\n  };\n\n  clip_rgb = function(rgb) {\n    var i, o;\n    rgb._clipped = false;\n    rgb._unclipped = rgb.slice(0);\n    for (i = o = 0; o < 3; i = ++o) {\n      if (i < 3) {\n        if (rgb[i] < 0 || rgb[i] > 255) {\n          rgb._clipped = true;\n        }\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 255) {\n          rgb[i] = 255;\n        }\n      } else if (i === 3) {\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 1) {\n          rgb[i] = 1;\n        }\n      }\n    }\n    if (!rgb._clipped) {\n      delete rgb._unclipped;\n    }\n    return rgb;\n  };\n\n  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;\n\n  TWOPI = PI * 2;\n\n  PITHIRD = PI / 3;\n\n  DEG2RAD = PI / 180;\n\n  RAD2DEG = 180 / PI;\n\n  chroma = function() {\n    if (arguments[0] instanceof Color) {\n      return arguments[0];\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, arguments, function(){});\n  };\n\n  chroma[\"default\"] = chroma;\n\n  _interpolators = [];\n\n  if ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\n    module.exports = chroma;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return chroma;\n    });\n  } else {\n    root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n    root.chroma = chroma;\n  }\n\n  chroma.version = '1.3.5';\n\n  _input = {};\n\n  _guess_formats = [];\n\n  _guess_formats_sorted = false;\n\n  Color = (function() {\n    function Color() {\n      var arg, args, chk, len, len1, me, mode, o, w;\n      me = this;\n      args = [];\n      for (o = 0, len = arguments.length; o < len; o++) {\n        arg = arguments[o];\n        if (arg != null) {\n          args.push(arg);\n        }\n      }\n      if (args.length > 1) {\n        mode = args[args.length - 1];\n      }\n      if (_input[mode] != null) {\n        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));\n      } else {\n        if (!_guess_formats_sorted) {\n          _guess_formats = _guess_formats.sort(function(a, b) {\n            return b.p - a.p;\n          });\n          _guess_formats_sorted = true;\n        }\n        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {\n          chk = _guess_formats[w];\n          mode = chk.test.apply(chk, args);\n          if (mode) {\n            break;\n          }\n        }\n        if (mode) {\n          me._rgb = clip_rgb(_input[mode].apply(_input, args));\n        }\n      }\n      if (me._rgb == null) {\n        console.warn('unknown format: ' + args);\n      }\n      if (me._rgb == null) {\n        me._rgb = [0, 0, 0];\n      }\n      if (me._rgb.length === 3) {\n        me._rgb.push(1);\n      }\n    }\n\n    Color.prototype.toString = function() {\n      return this.hex();\n    };\n\n    Color.prototype.clone = function() {\n      return chroma(me._rgb);\n    };\n\n    return Color;\n\n  })();\n\n  chroma._input = _input;\n\n\n  /**\n  \tColorBrewer colors for chroma.js\n  \n  \tCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The \n  \tPennsylvania State University.\n  \n  \tLicensed under the Apache License, Version 2.0 (the \"License\"); \n  \tyou may not use this file except in compliance with the License.\n  \tYou may obtain a copy of the License at\t\n  \thttp://www.apache.org/licenses/LICENSE-2.0\n  \n  \tUnless required by applicable law or agreed to in writing, software distributed\n  \tunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n  \tCONDITIONS OF ANY KIND, either express or implied. See the License for the\n  \tspecific language governing permissions and limitations under the License.\n  \n      @preserve\n   */\n\n  chroma.brewer = brewer = {\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n  };\n\n  (function() {\n    var key, results;\n    results = [];\n    for (key in brewer) {\n      results.push(brewer[key.toLowerCase()] = brewer[key]);\n    }\n    return results;\n  })();\n\n\n  /**\n  \tX11 color names\n  \n  \thttp://www.w3.org/TR/css3-color/#svg-color\n   */\n\n  w3cx11 = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflower: '#6495ed',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    laserlemon: '#ffff54',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrod: '#fafad2',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    maroon2: '#7f0000',\n    maroon3: '#b03060',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    purple2: '#7f007f',\n    purple3: '#a020f0',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n  };\n\n  chroma.colors = colors = w3cx11;\n\n  lab2rgb = function() {\n    var a, args, b, g, l, r, x, y, z;\n    args = unpack(arguments);\n    l = args[0], a = args[1], b = args[2];\n    y = (l + 16) / 116;\n    x = isNaN(a) ? y : y + a / 500;\n    z = isNaN(b) ? y : y - b / 200;\n    y = LAB_CONSTANTS.Yn * lab_xyz(y);\n    x = LAB_CONSTANTS.Xn * lab_xyz(x);\n    z = LAB_CONSTANTS.Zn * lab_xyz(z);\n    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);\n    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  xyz_rgb = function(r) {\n    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);\n  };\n\n  lab_xyz = function(t) {\n    if (t > LAB_CONSTANTS.t1) {\n      return t * t * t;\n    } else {\n      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);\n    }\n  };\n\n  LAB_CONSTANTS = {\n    Kn: 18,\n    Xn: 0.950470,\n    Yn: 1,\n    Zn: 1.088830,\n    t0: 0.137931034,\n    t1: 0.206896552,\n    t2: 0.12841855,\n    t3: 0.008856452\n  };\n\n  rgb2lab = function() {\n    var b, g, r, ref, ref1, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];\n    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n  };\n\n  rgb_xyz = function(r) {\n    if ((r /= 255) <= 0.04045) {\n      return r / 12.92;\n    } else {\n      return pow((r + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  xyz_lab = function(t) {\n    if (t > LAB_CONSTANTS.t3) {\n      return pow(t, 1 / 3);\n    } else {\n      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;\n    }\n  };\n\n  rgb2xyz = function() {\n    var b, g, r, ref, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = rgb_xyz(r);\n    g = rgb_xyz(g);\n    b = rgb_xyz(b);\n    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);\n    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);\n    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);\n    return [x, y, z];\n  };\n\n  chroma.lab = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['lab']), function(){});\n  };\n\n  _input.lab = lab2rgb;\n\n  Color.prototype.lab = function() {\n    return rgb2lab(this._rgb);\n  };\n\n  bezier = function(colors) {\n    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;\n    colors = (function() {\n      var len, o, results;\n      results = [];\n      for (o = 0, len = colors.length; o < len; o++) {\n        c = colors[o];\n        results.push(chroma(c));\n      }\n      return results;\n    })();\n    if (colors.length === 2) {\n      ref = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref[0], lab1 = ref[1];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push(lab0[i] + t * (lab1[i] - lab0[i]));\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 3) {\n      ref1 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 4) {\n      ref2 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 5) {\n      I0 = bezier(colors.slice(0, 3));\n      I1 = bezier(colors.slice(2, 5));\n      I = function(t) {\n        if (t < 0.5) {\n          return I0(t * 2);\n        } else {\n          return I1((t - 0.5) * 2);\n        }\n      };\n    }\n    return I;\n  };\n\n  chroma.bezier = function(colors) {\n    var f;\n    f = bezier(colors);\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    return f;\n  };\n\n\n  /*\n      chroma.js\n  \n      Copyright (c) 2011-2013, Gregor Aisch\n      All rights reserved.\n  \n      Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are met:\n  \n      * Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n  \n      * Redistributions in binary form must reproduce the above copyright notice,\n        this list of conditions and the following disclaimer in the documentation\n        and/or other materials provided with the distribution.\n  \n      * The name Gregor Aisch may not be used to endorse or promote products\n        derived from this software without specific prior written permission.\n  \n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  \n      @source: https://github.com/gka/chroma.js\n   */\n\n  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {\n    var dh, dl, f;\n    if (start == null) {\n      start = 300;\n    }\n    if (rotations == null) {\n      rotations = -1.5;\n    }\n    if (hue == null) {\n      hue = 1;\n    }\n    if (gamma == null) {\n      gamma = 1;\n    }\n    if (lightness == null) {\n      lightness = [0, 1];\n    }\n    dh = 0;\n    if (type(lightness) === 'array') {\n      dl = lightness[1] - lightness[0];\n    } else {\n      dl = 0;\n      lightness = [lightness, lightness];\n    }\n    f = function(fract) {\n      var a, amp, b, cos_a, g, h, l, r, sin_a;\n      a = TWOPI * ((start + 120) / 360 + rotations * fract);\n      l = pow(lightness[0] + dl * fract, gamma);\n      h = dh !== 0 ? hue[0] + fract * dh : hue;\n      amp = h * l * (1 - l) / 2;\n      cos_a = cos(a);\n      sin_a = sin(a);\n      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n      b = l + amp * (+1.97294 * cos_a);\n      return chroma(clip_rgb([r * 255, g * 255, b * 255]));\n    };\n    f.start = function(s) {\n      if (s == null) {\n        return start;\n      }\n      start = s;\n      return f;\n    };\n    f.rotations = function(r) {\n      if (r == null) {\n        return rotations;\n      }\n      rotations = r;\n      return f;\n    };\n    f.gamma = function(g) {\n      if (g == null) {\n        return gamma;\n      }\n      gamma = g;\n      return f;\n    };\n    f.hue = function(h) {\n      if (h == null) {\n        return hue;\n      }\n      hue = h;\n      if (type(hue) === 'array') {\n        dh = hue[1] - hue[0];\n        if (dh === 0) {\n          hue = hue[1];\n        }\n      } else {\n        dh = 0;\n      }\n      return f;\n    };\n    f.lightness = function(h) {\n      if (h == null) {\n        return lightness;\n      }\n      if (type(h) === 'array') {\n        lightness = h;\n        dl = h[1] - h[0];\n      } else {\n        lightness = [h, h];\n        dl = 0;\n      }\n      return f;\n    };\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    f.hue(hue);\n    return f;\n  };\n\n  chroma.random = function() {\n    var code, digits, i, o;\n    digits = '0123456789abcdef';\n    code = '#';\n    for (i = o = 0; o < 6; i = ++o) {\n      code += digits.charAt(floor(Math.random() * 16));\n    }\n    return new Color(code);\n  };\n\n  _interpolators = [];\n\n  interpolate = function(col1, col2, f, m) {\n    var interpol, len, o, res;\n    if (f == null) {\n      f = 0.5;\n    }\n    if (m == null) {\n      m = 'rgb';\n    }\n\n    /*\n    interpolates between colors\n    f = 0 --> me\n    f = 1 --> col\n     */\n    if (type(col1) !== 'object') {\n      col1 = chroma(col1);\n    }\n    if (type(col2) !== 'object') {\n      col2 = chroma(col2);\n    }\n    for (o = 0, len = _interpolators.length; o < len; o++) {\n      interpol = _interpolators[o];\n      if (m === interpol[0]) {\n        res = interpol[1](col1, col2, f, m);\n        break;\n      }\n    }\n    if (res == null) {\n      throw \"color mode \" + m + \" is not supported\";\n    }\n    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n  };\n\n  chroma.interpolate = interpolate;\n\n  Color.prototype.interpolate = function(col2, f, m) {\n    return interpolate(this, col2, f, m);\n  };\n\n  chroma.mix = interpolate;\n\n  Color.prototype.mix = Color.prototype.interpolate;\n\n  _input.rgb = function() {\n    var k, ref, results, v;\n    ref = unpack(arguments);\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(v);\n    }\n    return results;\n  };\n\n  chroma.rgb = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['rgb']), function(){});\n  };\n\n  Color.prototype.rgb = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (round) {\n      return this._rgb.map(Math.round).slice(0, 3);\n    } else {\n      return this._rgb.slice(0, 3);\n    }\n  };\n\n  Color.prototype.rgba = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (!round) {\n      return this._rgb.slice(0);\n    }\n    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];\n  };\n\n  _guess_formats.push({\n    p: 3,\n    test: function(n) {\n      var a;\n      a = unpack(arguments);\n      if (type(a) === 'array' && a.length === 3) {\n        return 'rgb';\n      }\n      if (a.length === 4 && type(a[3]) === \"number\" && a[3] >= 0 && a[3] <= 1) {\n        return 'rgb';\n      }\n    }\n  });\n\n  _input.lrgb = _input.rgb;\n\n  interpolate_lrgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);\n  };\n\n  _average_lrgb = function(colors) {\n    var col, f, len, o, rgb, xyz;\n    f = 1 / colors.length;\n    xyz = [0, 0, 0, 0];\n    for (o = 0, len = colors.length; o < len; o++) {\n      col = colors[o];\n      rgb = col._rgb;\n      xyz[0] += pow(rgb[0], 2) * f;\n      xyz[1] += pow(rgb[1], 2) * f;\n      xyz[2] += pow(rgb[2], 2) * f;\n      xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt(xyz[0]);\n    xyz[1] = sqrt(xyz[1]);\n    xyz[2] = sqrt(xyz[2]);\n    return new Color(xyz);\n  };\n\n  _interpolators.push(['lrgb', interpolate_lrgb]);\n\n  chroma.average = function(colors, mode) {\n    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    l = colors.length;\n    colors = colors.map(function(c) {\n      return chroma(c);\n    });\n    first = colors.splice(0, 1)[0];\n    if (mode === 'lrgb') {\n      return _average_lrgb(colors);\n    }\n    xyz = first.get(mode);\n    cnt = [];\n    dx = 0;\n    dy = 0;\n    for (i in xyz) {\n      xyz[i] = xyz[i] || 0;\n      cnt.push(!isNaN(xyz[i]) ? 1 : 0);\n      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n        A = xyz[i] / 180 * PI;\n        dx += cos(A);\n        dy += sin(A);\n      }\n    }\n    alpha = first.alpha();\n    for (o = 0, len = colors.length; o < len; o++) {\n      c = colors[o];\n      xyz2 = c.get(mode);\n      alpha += c.alpha();\n      for (i in xyz) {\n        if (!isNaN(xyz2[i])) {\n          xyz[i] += xyz2[i];\n          cnt[i] += 1;\n          if (mode.charAt(i) === 'h') {\n            A = xyz[i] / 180 * PI;\n            dx += cos(A);\n            dy += sin(A);\n          }\n        }\n      }\n    }\n    for (i in xyz) {\n      xyz[i] = xyz[i] / cnt[i];\n      if (mode.charAt(i) === 'h') {\n        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\n        while (A < 0) {\n          A += 360;\n        }\n        while (A >= 360) {\n          A -= 360;\n        }\n        xyz[i] = A;\n      }\n    }\n    return chroma(xyz, mode).alpha(alpha / l);\n  };\n\n  hex2rgb = function(hex) {\n    var a, b, g, r, rgb, u;\n    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {\n      if (hex.length === 4 || hex.length === 7) {\n        hex = hex.substr(1);\n      }\n      if (hex.length === 3) {\n        hex = hex.split(\"\");\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n      }\n      u = parseInt(hex, 16);\n      r = u >> 16;\n      g = u >> 8 & 0xFF;\n      b = u & 0xFF;\n      return [r, g, b, 1];\n    }\n    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {\n      if (hex.length === 9) {\n        hex = hex.substr(1);\n      }\n      u = parseInt(hex, 16);\n      r = u >> 24 & 0xFF;\n      g = u >> 16 & 0xFF;\n      b = u >> 8 & 0xFF;\n      a = round((u & 0xFF) / 0xFF * 100) / 100;\n      return [r, g, b, a];\n    }\n    if ((_input.css != null) && (rgb = _input.css(hex))) {\n      return rgb;\n    }\n    throw \"unknown color: \" + hex;\n  };\n\n  rgb2hex = function(channels, mode) {\n    var a, b, g, hxa, r, str, u;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    r = channels[0], g = channels[1], b = channels[2], a = channels[3];\n    r = Math.round(r);\n    g = Math.round(g);\n    b = Math.round(b);\n    u = r << 16 | g << 8 | b;\n    str = \"000000\" + u.toString(16);\n    str = str.substr(str.length - 6);\n    hxa = '0' + round(a * 255).toString(16);\n    hxa = hxa.substr(hxa.length - 2);\n    return \"#\" + (function() {\n      switch (mode.toLowerCase()) {\n        case 'rgba':\n          return str + hxa;\n        case 'argb':\n          return hxa + str;\n        default:\n          return str;\n      }\n    })();\n  };\n\n  _input.hex = function(h) {\n    return hex2rgb(h);\n  };\n\n  chroma.hex = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hex']), function(){});\n  };\n\n  Color.prototype.hex = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    return rgb2hex(this._rgb, mode);\n  };\n\n  _guess_formats.push({\n    p: 4,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"string\") {\n        return 'hex';\n      }\n    }\n  });\n\n  hsl2rgb = function() {\n    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;\n    args = unpack(arguments);\n    h = args[0], s = args[1], l = args[2];\n    if (s === 0) {\n      r = g = b = l * 255;\n    } else {\n      t3 = [0, 0, 0];\n      c = [0, 0, 0];\n      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      t1 = 2 * l - t2;\n      h /= 360;\n      t3[0] = h + 1 / 3;\n      t3[1] = h;\n      t3[2] = h - 1 / 3;\n      for (i = o = 0; o <= 2; i = ++o) {\n        if (t3[i] < 0) {\n          t3[i] += 1;\n        }\n        if (t3[i] > 1) {\n          t3[i] -= 1;\n        }\n        if (6 * t3[i] < 1) {\n          c[i] = t1 + (t2 - t1) * 6 * t3[i];\n        } else if (2 * t3[i] < 1) {\n          c[i] = t2;\n        } else if (3 * t3[i] < 2) {\n          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;\n        } else {\n          c[i] = t1;\n        }\n      }\n      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];\n    }\n    if (args.length > 3) {\n      return [r, g, b, args[3]];\n    } else {\n      return [r, g, b];\n    }\n  };\n\n  rgb2hsl = function(r, g, b) {\n    var h, l, min, ref, s;\n    if (r !== void 0 && r.length >= 3) {\n      ref = r, r = ref[0], g = ref[1], b = ref[2];\n    }\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    l = (max + min) / 2;\n    if (max === min) {\n      s = 0;\n      h = Number.NaN;\n    } else {\n      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n    }\n    if (r === max) {\n      h = (g - b) / (max - min);\n    } else if (g === max) {\n      h = 2 + (b - r) / (max - min);\n    } else if (b === max) {\n      h = 4 + (r - g) / (max - min);\n    }\n    h *= 60;\n    if (h < 0) {\n      h += 360;\n    }\n    return [h, s, l];\n  };\n\n  chroma.hsl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsl']), function(){});\n  };\n\n  _input.hsl = hsl2rgb;\n\n  Color.prototype.hsl = function() {\n    return rgb2hsl(this._rgb);\n  };\n\n  hsv2rgb = function() {\n    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;\n    args = unpack(arguments);\n    h = args[0], s = args[1], v = args[2];\n    v *= 255;\n    if (s === 0) {\n      r = g = b = v;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = v * (1 - s);\n      q = v * (1 - s * f);\n      t = v * (1 - s * (1 - f));\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsv = function() {\n    var b, delta, g, h, min, r, ref, s, v;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    v = max / 255.0;\n    if (max === 0) {\n      h = Number.NaN;\n      s = 0;\n    } else {\n      s = delta / max;\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, s, v];\n  };\n\n  chroma.hsv = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsv']), function(){});\n  };\n\n  _input.hsv = hsv2rgb;\n\n  Color.prototype.hsv = function() {\n    return rgb2hsv(this._rgb);\n  };\n\n  num2rgb = function(num) {\n    var b, g, r;\n    if (type(num) === \"number\" && num >= 0 && num <= 0xFFFFFF) {\n      r = num >> 16;\n      g = (num >> 8) & 0xFF;\n      b = num & 0xFF;\n      return [r, g, b, 1];\n    }\n    console.warn(\"unknown num color: \" + num);\n    return [0, 0, 0, 1];\n  };\n\n  rgb2num = function() {\n    var b, g, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    return (r << 16) + (g << 8) + b;\n  };\n\n  chroma.num = function(num) {\n    return new Color(num, 'num');\n  };\n\n  Color.prototype.num = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    return rgb2num(this._rgb, mode);\n  };\n\n  _input.num = num2rgb;\n\n  _guess_formats.push({\n    p: 1,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"number\" && n >= 0 && n <= 0xFFFFFF) {\n        return 'num';\n      }\n    }\n  });\n\n  hcg2rgb = function() {\n    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;\n    args = unpack(arguments);\n    h = args[0], c = args[1], _g = args[2];\n    c = c / 100;\n    g = g / 100 * 255;\n    _c = c * 255;\n    if (c === 0) {\n      r = g = b = _g;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = _g * (1 - c);\n      q = p + _c * (1 - f);\n      t = p + _c * f;\n      v = p + _c;\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hcg = function() {\n    var _g, b, c, delta, g, h, min, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    c = delta * 100 / 255;\n    _g = min / (255 - delta) * 100;\n    if (delta === 0) {\n      h = Number.NaN;\n    } else {\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, c, _g];\n  };\n\n  chroma.hcg = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hcg']), function(){});\n  };\n\n  _input.hcg = hcg2rgb;\n\n  Color.prototype.hcg = function() {\n    return rgb2hcg(this._rgb);\n  };\n\n  css2rgb = function(css) {\n    var aa, ab, hsl, i, m, o, rgb, w;\n    css = css.toLowerCase();\n    if ((chroma.colors != null) && chroma.colors[css]) {\n      return hex2rgb(chroma.colors[css]);\n    }\n    if (m = css.match(/rgb\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = o = 0; o <= 2; i = ++o) {\n        rgb[i] = +rgb[i];\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = w = 0; w <= 3; i = ++w) {\n        rgb[i] = +rgb[i];\n      }\n    } else if (m = css.match(/rgb\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = aa = 0; aa <= 2; i = ++aa) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = ab = 0; ab <= 2; i = ++ab) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = +rgb[3];\n    } else if (m = css.match(/hsl\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = 1;\n    } else if (m = css.match(/hsla\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = +m[4];\n    }\n    return rgb;\n  };\n\n  rgb2css = function(rgba) {\n    var mode;\n    mode = rgba[3] < 1 ? 'rgba' : 'rgb';\n    if (mode === 'rgb') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';\n    } else if (mode === 'rgba') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';\n    } else {\n\n    }\n  };\n\n  rnd = function(a) {\n    return round(a * 100) / 100;\n  };\n\n  hsl2css = function(hsl, alpha) {\n    var mode;\n    mode = alpha < 1 ? 'hsla' : 'hsl';\n    hsl[0] = rnd(hsl[0] || 0);\n    hsl[1] = rnd(hsl[1] * 100) + '%';\n    hsl[2] = rnd(hsl[2] * 100) + '%';\n    if (mode === 'hsla') {\n      hsl[3] = alpha;\n    }\n    return mode + '(' + hsl.join(',') + ')';\n  };\n\n  _input.css = function(h) {\n    return css2rgb(h);\n  };\n\n  chroma.css = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['css']), function(){});\n  };\n\n  Color.prototype.css = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (mode.slice(0, 3) === 'rgb') {\n      return rgb2css(this._rgb);\n    } else if (mode.slice(0, 3) === 'hsl') {\n      return hsl2css(this.hsl(), this.alpha());\n    }\n  };\n\n  _input.named = function(name) {\n    return hex2rgb(w3cx11[name]);\n  };\n\n  _guess_formats.push({\n    p: 5,\n    test: function(n) {\n      if (arguments.length === 1 && (w3cx11[n] != null)) {\n        return 'named';\n      }\n    }\n  });\n\n  Color.prototype.name = function(n) {\n    var h, k;\n    if (arguments.length) {\n      if (w3cx11[n]) {\n        this._rgb = hex2rgb(w3cx11[n]);\n      }\n      this._rgb[3] = 1;\n      this;\n    }\n    h = this.hex();\n    for (k in w3cx11) {\n      if (h === w3cx11[k]) {\n        return k;\n      }\n    }\n    return h;\n  };\n\n  lch2lab = function() {\n\n    /*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n    \n    A saturation multiplier was added by Gregor Aisch\n     */\n    var c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];\n    h = h * DEG2RAD;\n    return [l, cos(h) * c, sin(h) * c];\n  };\n\n  lch2rgb = function() {\n    var L, a, args, b, c, g, h, l, r, ref, ref1;\n    args = unpack(arguments);\n    l = args[0], c = args[1], h = args[2];\n    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];\n    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  lab2lch = function() {\n    var a, b, c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];\n    c = sqrt(a * a + b * b);\n    h = (atan2(b, a) * RAD2DEG + 360) % 360;\n    if (round(c * 10000) === 0) {\n      h = Number.NaN;\n    }\n    return [l, c, h];\n  };\n\n  rgb2lch = function() {\n    var a, b, g, l, r, ref, ref1;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];\n    return lab2lch(l, a, b);\n  };\n\n  chroma.lch = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'lch');\n  };\n\n  chroma.hcl = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'hcl');\n  };\n\n  _input.lch = lch2rgb;\n\n  _input.hcl = function() {\n    var c, h, l, ref;\n    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];\n    return lch2rgb([l, c, h]);\n  };\n\n  Color.prototype.lch = function() {\n    return rgb2lch(this._rgb);\n  };\n\n  Color.prototype.hcl = function() {\n    return rgb2lch(this._rgb).reverse();\n  };\n\n  rgb2cmyk = function(mode) {\n    var b, c, f, g, k, m, r, ref, y;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    k = 1 - Math.max(r, Math.max(g, b));\n    f = k < 1 ? 1 / (1 - k) : 0;\n    c = (1 - r - k) * f;\n    m = (1 - g - k) * f;\n    y = (1 - b - k) * f;\n    return [c, m, y, k];\n  };\n\n  cmyk2rgb = function() {\n    var alpha, args, b, c, g, k, m, r, y;\n    args = unpack(arguments);\n    c = args[0], m = args[1], y = args[2], k = args[3];\n    alpha = args.length > 4 ? args[4] : 1;\n    if (k === 1) {\n      return [0, 0, 0, alpha];\n    }\n    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);\n    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);\n    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);\n    return [r, g, b, alpha];\n  };\n\n  _input.cmyk = function() {\n    return cmyk2rgb(unpack(arguments));\n  };\n\n  chroma.cmyk = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['cmyk']), function(){});\n  };\n\n  Color.prototype.cmyk = function() {\n    return rgb2cmyk(this._rgb);\n  };\n\n  _input.gl = function() {\n    var i, k, o, rgb, v;\n    rgb = (function() {\n      var ref, results;\n      ref = unpack(arguments);\n      results = [];\n      for (k in ref) {\n        v = ref[k];\n        results.push(v);\n      }\n      return results;\n    }).apply(this, arguments);\n    for (i = o = 0; o <= 2; i = ++o) {\n      rgb[i] *= 255;\n    }\n    return rgb;\n  };\n\n  chroma.gl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['gl']), function(){});\n  };\n\n  Color.prototype.gl = function() {\n    var rgb;\n    rgb = this._rgb;\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n  };\n\n  rgb2luminance = function(r, g, b) {\n    var ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = luminance_x(r);\n    g = luminance_x(g);\n    b = luminance_x(b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  };\n\n  luminance_x = function(x) {\n    x /= 255;\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return pow((x + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  interpolate_rgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['rgb', interpolate_rgb]);\n\n  Color.prototype.luminance = function(lum, mode) {\n    var cur_lum, eps, max_iter, test;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (!arguments.length) {\n      return rgb2luminance(this._rgb);\n    }\n    if (lum === 0) {\n      this._rgb = [0, 0, 0, this._rgb[3]];\n    } else if (lum === 1) {\n      this._rgb = [255, 255, 255, this._rgb[3]];\n    } else {\n      eps = 1e-7;\n      max_iter = 20;\n      test = function(l, h) {\n        var lm, m;\n        m = l.interpolate(h, 0.5, mode);\n        lm = m.luminance();\n        if (Math.abs(lum - lm) < eps || !max_iter--) {\n          return m;\n        }\n        if (lm > lum) {\n          return test(l, m);\n        }\n        return test(m, h);\n      };\n      cur_lum = rgb2luminance(this._rgb);\n      this._rgb = (cur_lum > lum ? test(chroma('black'), this) : test(this, chroma('white'))).rgba();\n    }\n    return this;\n  };\n\n  temperature2rgb = function(kelvin) {\n    var b, g, r, temp;\n    temp = kelvin / 100;\n    if (temp < 66) {\n      r = 255;\n      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);\n      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);\n    } else {\n      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);\n      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);\n      b = 255;\n    }\n    return [r, g, b];\n  };\n\n  rgb2temperature = function() {\n    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    minTemp = 1000;\n    maxTemp = 40000;\n    eps = 0.4;\n    while (maxTemp - minTemp > eps) {\n      temp = (maxTemp + minTemp) * 0.5;\n      rgb = temperature2rgb(temp);\n      if ((rgb[2] / rgb[0]) >= (b / r)) {\n        maxTemp = temp;\n      } else {\n        minTemp = temp;\n      }\n    }\n    return round(temp);\n  };\n\n  chroma.temperature = chroma.kelvin = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['temperature']), function(){});\n  };\n\n  _input.temperature = _input.kelvin = _input.K = temperature2rgb;\n\n  Color.prototype.temperature = function() {\n    return rgb2temperature(this._rgb);\n  };\n\n  Color.prototype.kelvin = Color.prototype.temperature;\n\n  chroma.contrast = function(a, b) {\n    var l1, l2, ref, ref1;\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.luminance();\n    l2 = b.luminance();\n    if (l1 > l2) {\n      return (l1 + 0.05) / (l2 + 0.05);\n    } else {\n      return (l2 + 0.05) / (l1 + 0.05);\n    }\n  };\n\n  chroma.distance = function(a, b, mode) {\n    var d, i, l1, l2, ref, ref1, sum_sq;\n    if (mode == null) {\n      mode = 'lab';\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.get(mode);\n    l2 = b.get(mode);\n    sum_sq = 0;\n    for (i in l1) {\n      d = (l1[i] || 0) - (l2[i] || 0);\n      sum_sq += d * d;\n    }\n    return Math.sqrt(sum_sq);\n  };\n\n  chroma.deltaE = function(a, b, L, C) {\n    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;\n    if (L == null) {\n      L = 1;\n    }\n    if (C == null) {\n      C = 1;\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];\n    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];\n    c1 = sqrt(a1 * a1 + b1 * b1);\n    c2 = sqrt(a2 * a2 + b2 * b2);\n    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);\n    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;\n    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;\n    while (h1 < 0) {\n      h1 += 360;\n    }\n    while (h1 >= 360) {\n      h1 -= 360;\n    }\n    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));\n    c4 = c1 * c1 * c1 * c1;\n    f = sqrt(c4 / (c4 + 1900.0));\n    sh = sc * (f * t + 1.0 - f);\n    delL = L1 - L2;\n    delC = c1 - c2;\n    delA = a1 - a2;\n    delB = b1 - b2;\n    dH2 = delA * delA + delB * delB - delC * delC;\n    v1 = delL / (L * sl);\n    v2 = delC / (C * sc);\n    v3 = sh;\n    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));\n  };\n\n  Color.prototype.get = function(modechan) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    src = me[mode]();\n    if (channel) {\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        return src[i];\n      } else {\n        return console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      return src;\n    }\n  };\n\n  Color.prototype.set = function(modechan, value) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    if (channel) {\n      src = me[mode]();\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        if (type(value) === 'string') {\n          switch (value.charAt(0)) {\n            case '+':\n              src[i] += +value;\n              break;\n            case '-':\n              src[i] += +value;\n              break;\n            case '*':\n              src[i] *= +(value.substr(1));\n              break;\n            case '/':\n              src[i] /= +(value.substr(1));\n              break;\n            default:\n              src[i] = +value;\n          }\n        } else {\n          src[i] = value;\n        }\n      } else {\n        console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      src = value;\n    }\n    return chroma(src, mode).alpha(me.alpha());\n  };\n\n  Color.prototype.clipped = function() {\n    return this._rgb._clipped || false;\n  };\n\n  Color.prototype.alpha = function(a) {\n    if (arguments.length) {\n      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);\n    }\n    return this._rgb[3];\n  };\n\n  Color.prototype.darken = function(amount) {\n    var lab, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lab = me.lab();\n    lab[0] -= LAB_CONSTANTS.Kn * amount;\n    return chroma.lab(lab).alpha(me.alpha());\n  };\n\n  Color.prototype.brighten = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.darken(-amount);\n  };\n\n  Color.prototype.darker = Color.prototype.darken;\n\n  Color.prototype.brighter = Color.prototype.brighten;\n\n  Color.prototype.saturate = function(amount) {\n    var lch, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lch = me.lch();\n    lch[1] += amount * LAB_CONSTANTS.Kn;\n    if (lch[1] < 0) {\n      lch[1] = 0;\n    }\n    return chroma.lch(lch).alpha(me.alpha());\n  };\n\n  Color.prototype.desaturate = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.saturate(-amount);\n  };\n\n  Color.prototype.premultiply = function() {\n    var a, rgb;\n    rgb = this.rgb();\n    a = this.alpha();\n    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);\n  };\n\n  blend = function(bottom, top, mode) {\n    if (!blend[mode]) {\n      throw 'unknown blend mode ' + mode;\n    }\n    return blend[mode](bottom, top);\n  };\n\n  blend_f = function(f) {\n    return function(bottom, top) {\n      var c0, c1;\n      c0 = chroma(top).rgb();\n      c1 = chroma(bottom).rgb();\n      return chroma(f(c0, c1), 'rgb');\n    };\n  };\n\n  each = function(f) {\n    return function(c0, c1) {\n      var i, o, out;\n      out = [];\n      for (i = o = 0; o <= 3; i = ++o) {\n        out[i] = f(c0[i], c1[i]);\n      }\n      return out;\n    };\n  };\n\n  normal = function(a, b) {\n    return a;\n  };\n\n  multiply = function(a, b) {\n    return a * b / 255;\n  };\n\n  darken = function(a, b) {\n    if (a > b) {\n      return b;\n    } else {\n      return a;\n    }\n  };\n\n  lighten = function(a, b) {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  screen = function(a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  };\n\n  overlay = function(a, b) {\n    if (b < 128) {\n      return 2 * a * b / 255;\n    } else {\n      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n    }\n  };\n\n  burn = function(a, b) {\n    return 255 * (1 - (1 - b / 255) / (a / 255));\n  };\n\n  dodge = function(a, b) {\n    if (a === 255) {\n      return 255;\n    }\n    a = 255 * (b / 255) / (1 - a / 255);\n    if (a > 255) {\n      return 255;\n    } else {\n      return a;\n    }\n  };\n\n  blend.normal = blend_f(each(normal));\n\n  blend.multiply = blend_f(each(multiply));\n\n  blend.screen = blend_f(each(screen));\n\n  blend.overlay = blend_f(each(overlay));\n\n  blend.darken = blend_f(each(darken));\n\n  blend.lighten = blend_f(each(lighten));\n\n  blend.dodge = blend_f(each(dodge));\n\n  blend.burn = blend_f(each(burn));\n\n  chroma.blend = blend;\n\n  chroma.analyze = function(data) {\n    var len, o, r, val;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    for (o = 0, len = data.length; o < len; o++) {\n      val = data[o];\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.scale = function(colors, positions) {\n    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;\n    _mode = 'rgb';\n    _nacol = chroma('#ccc');\n    _spread = 0;\n    _fixed = false;\n    _domain = [0, 1];\n    _pos = [];\n    _padding = [0, 0];\n    _classes = false;\n    _colors = [];\n    _out = false;\n    _min = 0;\n    _max = 1;\n    _correctLightness = false;\n    _colorCache = {};\n    _useCache = true;\n    _gamma = 1;\n    setColors = function(colors) {\n      var c, col, o, ref, ref1, w;\n      if (colors == null) {\n        colors = ['#fff', '#000'];\n      }\n      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {\n        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;\n      }\n      if (type(colors) === 'array') {\n        colors = colors.slice(0);\n        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {\n          col = colors[c];\n          if (type(col) === \"string\") {\n            colors[c] = chroma(col);\n          }\n        }\n        _pos.length = 0;\n        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {\n          _pos.push(c / (colors.length - 1));\n        }\n      }\n      resetCache();\n      return _colors = colors;\n    };\n    getClass = function(value) {\n      var i, n;\n      if (_classes != null) {\n        n = _classes.length - 1;\n        i = 0;\n        while (i < n && value >= _classes[i]) {\n          i++;\n        }\n        return i - 1;\n      }\n      return 0;\n    };\n    tmap = function(t) {\n      return t;\n    };\n    classifyValue = function(value) {\n      var i, maxc, minc, n, val;\n      val = value;\n      if (_classes.length > 2) {\n        n = _classes.length - 1;\n        i = getClass(value);\n        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);\n        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);\n        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);\n      }\n      return val;\n    };\n    getColor = function(val, bypassMap) {\n      var c, col, i, k, o, p, ref, t;\n      if (bypassMap == null) {\n        bypassMap = false;\n      }\n      if (isNaN(val)) {\n        return _nacol;\n      }\n      if (!bypassMap) {\n        if (_classes && _classes.length > 2) {\n          c = getClass(val);\n          t = c / (_classes.length - 2);\n        } else if (_max !== _min) {\n          t = (val - _min) / (_max - _min);\n        } else {\n          t = 1;\n        }\n      } else {\n        t = val;\n      }\n      if (!bypassMap) {\n        t = tmap(t);\n      }\n      if (_gamma !== 1) {\n        t = pow(t, _gamma);\n      }\n      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n      t = Math.min(1, Math.max(0, t));\n      k = Math.floor(t * 10000);\n      if (_useCache && _colorCache[k]) {\n        col = _colorCache[k];\n      } else {\n        if (type(_colors) === 'array') {\n          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n            p = _pos[i];\n            if (t <= p) {\n              col = _colors[i];\n              break;\n            }\n            if (t >= p && i === _pos.length - 1) {\n              col = _colors[i];\n              break;\n            }\n            if (t > p && t < _pos[i + 1]) {\n              t = (t - p) / (_pos[i + 1] - p);\n              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);\n              break;\n            }\n          }\n        } else if (type(_colors) === 'function') {\n          col = _colors(t);\n        }\n        if (_useCache) {\n          _colorCache[k] = col;\n        }\n      }\n      return col;\n    };\n    resetCache = function() {\n      return _colorCache = {};\n    };\n    setColors(colors);\n    f = function(v) {\n      var c;\n      c = chroma(getColor(v));\n      if (_out && c[_out]) {\n        return c[_out]();\n      } else {\n        return c;\n      }\n    };\n    f.classes = function(classes) {\n      var d;\n      if (classes != null) {\n        if (type(classes) === 'array') {\n          _classes = classes;\n          _domain = [classes[0], classes[classes.length - 1]];\n        } else {\n          d = chroma.analyze(_domain);\n          if (classes === 0) {\n            _classes = [d.min, d.max];\n          } else {\n            _classes = chroma.limits(d, 'e', classes);\n          }\n        }\n        return f;\n      }\n      return _classes;\n    };\n    f.domain = function(domain) {\n      var c, d, k, len, o, ref, w;\n      if (!arguments.length) {\n        return _domain;\n      }\n      _min = domain[0];\n      _max = domain[domain.length - 1];\n      _pos = [];\n      k = _colors.length;\n      if (domain.length === k && _min !== _max) {\n        for (o = 0, len = domain.length; o < len; o++) {\n          d = domain[o];\n          _pos.push((d - _min) / (_max - _min));\n        }\n      } else {\n        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {\n          _pos.push(c / (k - 1));\n        }\n      }\n      _domain = [_min, _max];\n      return f;\n    };\n    f.mode = function(_m) {\n      if (!arguments.length) {\n        return _mode;\n      }\n      _mode = _m;\n      resetCache();\n      return f;\n    };\n    f.range = function(colors, _pos) {\n      setColors(colors, _pos);\n      return f;\n    };\n    f.out = function(_o) {\n      _out = _o;\n      return f;\n    };\n    f.spread = function(val) {\n      if (!arguments.length) {\n        return _spread;\n      }\n      _spread = val;\n      return f;\n    };\n    f.correctLightness = function(v) {\n      if (v == null) {\n        v = true;\n      }\n      _correctLightness = v;\n      resetCache();\n      if (_correctLightness) {\n        tmap = function(t) {\n          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;\n          L0 = getColor(0, true).lab()[0];\n          L1 = getColor(1, true).lab()[0];\n          pol = L0 > L1;\n          L_actual = getColor(t, true).lab()[0];\n          L_ideal = L0 + (L1 - L0) * t;\n          L_diff = L_actual - L_ideal;\n          t0 = 0;\n          t1 = 1;\n          max_iter = 20;\n          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n            (function() {\n              if (pol) {\n                L_diff *= -1;\n              }\n              if (L_diff < 0) {\n                t0 = t;\n                t += (t1 - t) * 0.5;\n              } else {\n                t1 = t;\n                t += (t0 - t) * 0.5;\n              }\n              L_actual = getColor(t, true).lab()[0];\n              return L_diff = L_actual - L_ideal;\n            })();\n          }\n          return t;\n        };\n      } else {\n        tmap = function(t) {\n          return t;\n        };\n      }\n      return f;\n    };\n    f.padding = function(p) {\n      if (p != null) {\n        if (type(p) === 'number') {\n          p = [p, p];\n        }\n        _padding = p;\n        return f;\n      } else {\n        return _padding;\n      }\n    };\n    f.colors = function(numColors, out) {\n      var dd, dm, i, o, ref, result, results, samples, w;\n      if (arguments.length < 2) {\n        out = 'hex';\n      }\n      result = [];\n      if (arguments.length === 0) {\n        result = _colors.slice(0);\n      } else if (numColors === 1) {\n        result = [f(0.5)];\n      } else if (numColors > 1) {\n        dm = _domain[0];\n        dd = _domain[1] - dm;\n        result = (function() {\n          results = [];\n          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }\n          return results;\n        }).apply(this).map(function(i) {\n          return f(dm + i / (numColors - 1) * dd);\n        });\n      } else {\n        colors = [];\n        samples = [];\n        if (_classes && _classes.length > 2) {\n          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {\n            samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n          }\n        } else {\n          samples = _domain;\n        }\n        result = samples.map(function(v) {\n          return f(v);\n        });\n      }\n      if (chroma[out]) {\n        result = result.map(function(c) {\n          return c[out]();\n        });\n      }\n      return result;\n    };\n    f.cache = function(c) {\n      if (c != null) {\n        _useCache = c;\n        return f;\n      } else {\n        return _useCache;\n      }\n    };\n    f.gamma = function(g) {\n      if (g != null) {\n        _gamma = g;\n        return f;\n      } else {\n        return _gamma;\n      }\n    };\n    return f;\n  };\n\n  if (chroma.scales == null) {\n    chroma.scales = {};\n  }\n\n  chroma.scales.cool = function() {\n    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);\n  };\n\n  chroma.scales.hot = function() {\n    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');\n  };\n\n  chroma.analyze = function(data, key, filter) {\n    var add, k, len, o, r, val, visit;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    if (filter == null) {\n      filter = function() {\n        return true;\n      };\n    }\n    add = function(val) {\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    };\n    visit = function(val, k) {\n      if (filter(val, k)) {\n        if ((key != null) && type(key) === 'function') {\n          return add(key(val));\n        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {\n          return add(val[key]);\n        } else {\n          return add(val);\n        }\n      }\n    };\n    if (type(data) === 'array') {\n      for (o = 0, len = data.length; o < len; o++) {\n        val = data[o];\n        visit(val);\n      }\n    } else {\n      for (k in data) {\n        val = data[k];\n        visit(val, k);\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.limits = function(data, mode, num) {\n    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;\n    if (mode == null) {\n      mode = 'equal';\n    }\n    if (num == null) {\n      num = 7;\n    }\n    if (type(data) === 'array') {\n      data = chroma.analyze(data);\n    }\n    min = data.min;\n    max = data.max;\n    sum = data.sum;\n    values = data.values.sort(function(a, b) {\n      return a - b;\n    });\n    if (num === 1) {\n      return [min, max];\n    }\n    limits = [];\n    if (mode.substr(0, 1) === 'c') {\n      limits.push(min);\n      limits.push(max);\n    }\n    if (mode.substr(0, 1) === 'e') {\n      limits.push(min);\n      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n        limits.push(min + (i / num) * (max - min));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'l') {\n      if (min <= 0) {\n        throw 'Logarithmic scales are only possible for values > 0';\n      }\n      min_log = Math.LOG10E * log(min);\n      max_log = Math.LOG10E * log(max);\n      limits.push(min);\n      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {\n        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'q') {\n      limits.push(min);\n      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {\n        p = (values.length - 1) * i / num;\n        pb = floor(p);\n        if (pb === p) {\n          limits.push(values[pb]);\n        } else {\n          pr = p - pb;\n          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n        }\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'k') {\n\n      /*\n      implementation based on\n      http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n      simplified for 1-d input values\n       */\n      n = values.length;\n      assignments = new Array(n);\n      clusterSizes = new Array(num);\n      repeat = true;\n      nb_iters = 0;\n      centroids = null;\n      centroids = [];\n      centroids.push(min);\n      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {\n        centroids.push(min + (i / num) * (max - min));\n      }\n      centroids.push(max);\n      while (repeat) {\n        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {\n          clusterSizes[j] = 0;\n        }\n        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {\n          value = values[i];\n          mindist = Number.MAX_VALUE;\n          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {\n            dist = abs(centroids[j] - value);\n            if (dist < mindist) {\n              mindist = dist;\n              best = j;\n            }\n          }\n          clusterSizes[best]++;\n          assignments[i] = best;\n        }\n        newCentroids = new Array(num);\n        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {\n          newCentroids[j] = null;\n        }\n        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {\n          cluster = assignments[i];\n          if (newCentroids[cluster] === null) {\n            newCentroids[cluster] = values[i];\n          } else {\n            newCentroids[cluster] += values[i];\n          }\n        }\n        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {\n          newCentroids[j] *= 1 / clusterSizes[j];\n        }\n        repeat = false;\n        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {\n          if (newCentroids[j] !== centroids[i]) {\n            repeat = true;\n            break;\n          }\n        }\n        centroids = newCentroids;\n        nb_iters++;\n        if (nb_iters > 200) {\n          repeat = false;\n        }\n      }\n      kClusters = {};\n      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {\n        kClusters[j] = [];\n      }\n      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {\n        cluster = assignments[i];\n        kClusters[cluster].push(values[i]);\n      }\n      tmpKMeansBreaks = [];\n      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {\n        tmpKMeansBreaks.push(kClusters[j][0]);\n        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n      }\n      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {\n        return a - b;\n      });\n      limits.push(tmpKMeansBreaks[0]);\n      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {\n        v = tmpKMeansBreaks[i];\n        if (!isNaN(v) && limits.indexOf(v) === -1) {\n          limits.push(v);\n        }\n      }\n    }\n    return limits;\n  };\n\n  hsi2rgb = function(h, s, i) {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n    var args, b, g, r;\n    args = unpack(arguments);\n    h = args[0], s = args[1], i = args[2];\n    if (isNaN(h)) {\n      h = 0;\n    }\n    h /= 360;\n    if (h < 1 / 3) {\n      b = (1 - s) / 3;\n      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      g = 1 - (b + r);\n    } else if (h < 2 / 3) {\n      h -= 1 / 3;\n      r = (1 - s) / 3;\n      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      b = 1 - (r + g);\n    } else {\n      h -= 2 / 3;\n      g = (1 - s) / 3;\n      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      r = 1 - (g + b);\n    }\n    r = limit(i * r * 3);\n    g = limit(i * g * 3);\n    b = limit(i * b * 3);\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsi = function() {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n     */\n    var b, g, h, i, min, r, ref, s;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    TWOPI = Math.PI * 2;\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    i = (r + g + b) / 3;\n    s = 1 - min / i;\n    if (s === 0) {\n      h = 0;\n    } else {\n      h = ((r - g) + (r - b)) / 2;\n      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));\n      h = Math.acos(h);\n      if (b > g) {\n        h = TWOPI - h;\n      }\n      h /= TWOPI;\n    }\n    return [h * 360, s, i];\n  };\n\n  chroma.hsi = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsi']), function(){});\n  };\n\n  _input.hsi = hsi2rgb;\n\n  Color.prototype.hsi = function() {\n    return rgb2hsi(this._rgb);\n  };\n\n  interpolate_hsx = function(col1, col2, f, m) {\n    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;\n    if (m === 'hsl') {\n      xyz0 = col1.hsl();\n      xyz1 = col2.hsl();\n    } else if (m === 'hsv') {\n      xyz0 = col1.hsv();\n      xyz1 = col2.hsv();\n    } else if (m === 'hcg') {\n      xyz0 = col1.hcg();\n      xyz1 = col2.hcg();\n    } else if (m === 'hsi') {\n      xyz0 = col1.hsi();\n      xyz1 = col2.hsi();\n    } else if (m === 'lch' || m === 'hcl') {\n      m = 'hcl';\n      xyz0 = col1.hcl();\n      xyz1 = col2.hcl();\n    }\n    if (m.substr(0, 1) === 'h') {\n      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];\n      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];\n    }\n    if (!isNaN(hue0) && !isNaN(hue1)) {\n      if (hue1 > hue0 && hue1 - hue0 > 180) {\n        dh = hue1 - (hue0 + 360);\n      } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n        dh = hue1 + 360 - hue0;\n      } else {\n        dh = hue1 - hue0;\n      }\n      hue = hue0 + f * dh;\n    } else if (!isNaN(hue0)) {\n      hue = hue0;\n      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {\n        sat = sat0;\n      }\n    } else if (!isNaN(hue1)) {\n      hue = hue1;\n      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {\n        sat = sat1;\n      }\n    } else {\n      hue = Number.NaN;\n    }\n    if (sat == null) {\n      sat = sat0 + f * (sat1 - sat0);\n    }\n    lbv = lbv0 + f * (lbv1 - lbv0);\n    return res = chroma[m](hue, sat, lbv);\n  };\n\n  _interpolators = _interpolators.concat((function() {\n    var len, o, ref, results;\n    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];\n    results = [];\n    for (o = 0, len = ref.length; o < len; o++) {\n      m = ref[o];\n      results.push([m, interpolate_hsx]);\n    }\n    return results;\n  })());\n\n  interpolate_num = function(col1, col2, f, m) {\n    var n1, n2;\n    n1 = col1.num();\n    n2 = col2.num();\n    return chroma.num(n1 + (n2 - n1) * f, 'num');\n  };\n\n  _interpolators.push(['num', interpolate_num]);\n\n  interpolate_lab = function(col1, col2, f, m) {\n    var res, xyz0, xyz1;\n    xyz0 = col1.lab();\n    xyz1 = col2.lab();\n    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['lab', interpolate_lab]);\n\n}).call(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/chroma-js/chroma.js\n// module id = ./node_modules/chroma-js/chroma.js\n// module chunks = component---src-pages-otkit-colors-js component---src-pages-index-js"],"sourceRoot":""}